generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

// -------------------------------------------------------------------------------------------------

model Body {
  id String @id @default(uuid()) @db.Uuid

  acronym String?
  name    String

  roles Role[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "bodies")
}

model Contribution {
  id String @id @default(uuid()) @db.Uuid

  endDate   DateTime? @map(name: "end_date")
  startDate DateTime? @map(name: "start_date")

  countryId      String? @map(name: "country_id") @db.Uuid
  personId       String  @map(name: "person_id") @db.Uuid
  roleId         String  @map(name: "role_id") @db.Uuid
  workingGroupId String? @map(name: "working_group_id") @db.Uuid

  country      Country?      @relation(fields: [countryId], references: [id])
  person       Person        @relation(fields: [personId], references: [id], onDelete: Cascade)
  role         Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  workingGroup WorkingGroup? @relation(fields: [workingGroupId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "contributions")
}

enum CountryType {
  cooperating_partnership
  member_country
  other
}

model Country {
  id String @id @default(uuid()) @db.Uuid

  code      String
  endDate   DateTime?   @map(name: "end_date")
  logo      String?
  name      String
  startDate DateTime?   @map(name: "start_date")
  type      CountryType

  contributions Contribution[]
  institutions  Institution[]
  outreach      Outreach[]
  reports       Report[]
  services      Service[]
  software      Software[]
  users         User[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index(fields: [code])
  @@map(name: "countries")
}

enum EventSizeType {
  dariah_commissioned
  large
  medium
  small
}

model EventSize {
  id String @id @default(uuid()) @db.Uuid

  annualValue Int           @map(name: "annual_value")
  type        EventSizeType

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "event_sizes")
}

model EventReport {
  id String @id @default(uuid()) @db.Uuid

  dariahCommissionedEvent String? @map(name: "dariah_commissioned_event")
  largeMeetings           Int?    @map(name: "large_meetings")
  mediumMeetings          Int?    @map(name: "medium_meetings")
  reusableOutcomes        String? @map(name: "reusable_outcomes")
  smallMeetings           Int?    @map(name: "small_meetings")

  reportId String @unique @map(name: "report_id") @db.Uuid

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "event_reports")
}

enum InstitutionType {
  cooperating_partner
  national_coordinating_institution
  national_representative_institution
  other
  partner_institution
}

model Institution {
  id String @id @default(uuid()) @db.Uuid

  endDate   DateTime?         @map(name: "end_date")
  name      String
  ROR       String?           @map(name: "ror")
  startDate DateTime?         @map(name: "start_date")
  types     InstitutionType[]
  url       String[]

  countries Country[]
  persons   Person[]
  services  InstitutionToService[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "institutions")
}

enum InstitutionServiceRole {
  content_provider
  service_owner
  service_provider
  technical_contact
}

model InstitutionToService {
  role InstitutionServiceRole

  institutionId String @map(name: "institution_id") @db.Uuid
  serviceId     String @map(name: "service_id") @db.Uuid

  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([institutionId, role, serviceId])
  @@map(name: "institution_service")
}

enum OutreachType {
  national_website
  social_media
}

model Outreach {
  id String @id @default(uuid()) @db.Uuid

  endDate   DateTime?    @map(name: "end_date")
  name      String
  startDate DateTime?    @map(name: "start_date")
  type      OutreachType
  url       String

  countryId String? @map(name: "country_id") @db.Uuid

  country Country?         @relation(fields: [countryId], references: [id], onDelete: Cascade)
  reports OutreachReport[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "outreach")
}

model OutreachTypeValue {
  id String @id @default(uuid()) @db.Uuid

  annualValue Int          @map(name: "annual_value")
  type        OutreachType

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "outreach_type_values")
}

model OutreachReport {
  id String @id @default(uuid()) @db.Uuid

  outreachId String @map(name: "outreach_id") @db.Uuid
  reportId   String @map(name: "report_id") @db.Uuid

  kpis     OutreachKpi[]
  outreach Outreach      @relation(fields: [outreachId], references: [id], onDelete: Cascade)
  report   Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "outreach_reports")
}

enum OutreachKpiType {
  engagement
  followers
  impressions
  mention
  new_content
  page_views
  posts
  reach
  subscribers
  unique_visitors
  views
  watch_time
}

model OutreachKpi {
  id String @id @default(uuid()) @db.Uuid

  unit  OutreachKpiType
  value Int

  outreachReportId String @map(name: "outreach_report_id") @db.Uuid

  outreachReport OutreachReport @relation(fields: [outreachReportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "outreach_kpis")
}

model Person {
  id String @id @default(uuid()) @db.Uuid

  // `prisma` currently does not support unique constraints on nullable fields, even though postgres does
  // @see https://github.com/prisma/prisma/issues/3387
  email String? // @unique
  name  String
  ORCID String? @map(name: "orcid")

  contributions Contribution[]
  institutions  Institution[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "persons")
}

enum ProjectScope {
  eu
  national
  regional
}

model ProjectsFundingLeverage {
  id String @id @default(uuid()) @db.Uuid

  amount        Int?
  funders       String?
  name          String
  projectMonths Int?          @map(name: "project_months")
  scope         ProjectScope?
  startDate     DateTime?     @map(name: "start_date")
  totalAmount   Int?          @map(name: "total_amount")

  reportId String @map(name: "report_id") @db.Uuid

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "projects_funding_leverage")
}

enum ReportStatus {
  draft
  final
}

model Report {
  id String @id @default(uuid()) @db.Uuid

  comments                 Json?
  contributionsCount       Int?
  operationalCost          Int?
  operationalCostDetail    Json?
  operationalCostThreshold Int?
  status                   ReportStatus @default(draft)
  year                     Int

  countryId String @map(name: "country_id") @db.Uuid

  country                    Country                     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  eventReport                EventReport?
  outreachReports            OutreachReport[]
  projectsFundingLeverages   ProjectsFundingLeverage[]
  researchPolicyDevelopments ResearchPolicyDevelopment[]
  serviceReports             ServiceReport[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([countryId, year])
  @@index(fields: [year])
  @@map(name: "reports")
}

enum ResearchPolicyLevel {
  eu
  international
  institutional
  national
  regional
}

model ResearchPolicyDevelopment {
  id String @id @default(uuid()) @db.Uuid

  level   ResearchPolicyLevel
  name    String
  outcome String?

  reportId String @map(name: "report_id") @db.Uuid

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "research_policy_developments")
}

model Role {
  id String @id @default(uuid()) @db.Uuid

  annualValue Int    @map(name: "annual_value")
  name        String

  bodies        Body[]
  contributions Contribution[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "roles")
}

enum ServiceAudience {
  dariah_team
  global
  national_local
}

enum ServiceMarketplaceStatus {
  no
  not_applicable
  yes
}

enum ServiceStatus {
  discontinued
  in_preparation
  live
  needs_review
  to_be_discontinued
}

enum ServiceType {
  community
  core
  internal
}

model Service {
  id String @id @default(uuid()) @db.Uuid

  agreements              String?
  audience                ServiceAudience?
  dariahBranding          Boolean?                  @map(name: "dariah_branding")
  eoscOnboarding          Boolean?                  @map(name: "eosc_onboarding")
  marketplaceStatus       ServiceMarketplaceStatus? @map(name: "marketplace_status")
  monitoring              Boolean?
  name                    String
  privateSupplier         Boolean?                  @map(name: "private_supplier")
  status                  ServiceStatus?
  technicalContact        String?                   @map(name: "technical_contact")
  technicalReadinessLevel Int?                      @map(name: "technical_readiness_level")
  type                    ServiceType?
  url                     String[]
  valueProposition        String?                   @map(name: "value_proposition")

  sizeId String @map(name: "size_id") @db.Uuid

  countries    Country[]
  institutions InstitutionToService[]
  reports      ServiceReport[]
  size         ServiceSize            @relation(fields: [sizeId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "services")
}

enum ServiceSizeType {
  core
  large
  medium
  small
}

model ServiceSize {
  id String @id @default(uuid()) @db.Uuid

  annualValue Int             @map(name: "annual_value")
  type        ServiceSizeType

  Service Service[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "service_sizes")
}

model ServiceReport {
  id String @id @default(uuid()) @db.Uuid

  reportId  String @map(name: "report_id") @db.Uuid
  serviceId String @map(name: "service_id") @db.Uuid

  kpis    ServiceKpi[]
  report  Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  service Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "service_reports")
}

enum ServiceKpiType {
  downloads
  hits
  items
  jobs_processed
  page_views
  registered_users
  searches
  sessions
  unique_users
  visits
  websites_hosted
}

model ServiceKpi {
  id String @id @default(uuid()) @db.Uuid

  unit  ServiceKpiType
  value Int

  serviceReportId String @map(name: "service_report_id") @db.Uuid

  serviceReport ServiceReport @relation(fields: [serviceReportId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "service_kpis")
}

enum SoftwareMarketplaceOnboardingStatus {
  added_as_external_id
  added_as_item
  no
  not_applicable
}

enum SoftwareStatus {
  maintained
  needs_review
  not_maintained
}

model Software {
  id String @id @default(uuid()) @db.Uuid

  comment                     String?
  name                        String
  marketplaceUrl              String?                              @map(name: "marketplace_url")
  marketplaceOnboardingStatus SoftwareMarketplaceOnboardingStatus? @map(name: "marketplace_onboarding_status")
  status                      SoftwareStatus?
  url                         String[]

  countries Country[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "software")
}

model WorkingGroup {
  id String @id @default(uuid()) @db.Uuid

  endDate   DateTime? @map(name: "end_date")
  name      String
  startDate DateTime? @map(name: "start_date")

  chairs Contribution[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "working_groups")
}

// -------------------------------------------------------------------------------------------------

model Account {
  id String @id @default(uuid()) @db.Uuid

  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

// model Authenticator {
//   id                   String  @id @default(uuid()) @db.Uuid

//   counter              Int
//   credentialBackedUp   Boolean @map("credential_backed_up")
//   credentialDeviceType String  @map("credential_device_type")
//   credentialID         String  @unique @map("credential_id") @db.Uuid
//   credentialPublicKey  String  @map("credential_public_key")
//   providerAccountId    String  @map("provider_account_id")
//   transports           String?

//   userId               String  @map("user_id") @db.Uuid

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map(name: "authenticators")
// }

// model Session {
//   id           String   @id @default(uuid()) @db.Uuid

//   expires      DateTime
//   sessionToken String   @unique @map("session_token")

//   userId       String   @map("user_id") @db.Uuid

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map(name: "sessions")
// }

enum UserRole {
  admin
  contributor
}

enum UserStatus {
  unverified
  verified
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  name          String?
  image         String?
  password      String?
  role          UserRole   @default(contributor)
  status        UserStatus @default(unverified)

  countryId String? @map("country_id") @db.Uuid

  accounts Account[]
  // authenticators Authenticator[]
  country  Country?  @relation(fields: [countryId], references: [id])
  // sessions       Session[]

  @@map(name: "users")
}

// model VerificationToken {
//   identifier String

//   expires    DateTime
//   token      String   @unique

//   @@unique([identifier, token])
//   @@map(name: "verification_tokens")
// }
